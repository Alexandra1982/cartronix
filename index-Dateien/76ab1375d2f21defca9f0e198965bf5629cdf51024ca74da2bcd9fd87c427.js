
/*
 *
 *                           .__  .__ __
 *  __ __  ______ ___________|  | |__|  | __ ____
 * |  |  \/  ___// __ \_  __ \  | |  |  |/ // __ \
 * |  |  /\___ \\  ___/|  | \/  |_|  |    <\  ___/
 * |____//____  >\___  >__|  |____/__|__|_ \\___  >
 *            \/     \/                   \/    \/
 *
 *
 * (c) 2017, Userlike - https://www.userlike.com
 *
 * Userlike Chat Client
 * Appkey:    7b2506ca-7d85-388c-bc03-710de7899232
 * Widgetkey: 76ab1375d2f21defca9f0e198965bf5629cdf51024ca74da2bcd9fd87c427f68
 * Version:   3
 * Created:   2018-03-26 07:49:50.343422+00:00
 *
 */

(function (root, factory) {
  if (typeof define === 'function' && define.amd && (typeof require !== "function" || (typeof require === "function" &&
      typeof require.specified === "function" && require.specified('userlike-loader')))) {
      return define('userlike-loader', function() {
        return factory.call(this, root, true);
      });
  } else {
    return factory.call(this, root, false).load();
  }
}(window, function(root, tryRjs) {
  var options, api;
  if (tryRjs == null) { tryRjs = true; }
  root.userlike = root.userlike || {};
  root.userlike.loader = function(src) {
    var script;
    if (tryRjs) {
        try {
            require.config({
                paths: { 'userlike': src.replace(/\.js$/, '') }
            });
            require(['userlike'], function(userlike) {});
            return true;
        } catch (e) {
            if (window.console && window.console.log) {
                window.console.log("RequireJS failed to load userlike module");
            }
        }
    }
    script = document.createElement("script");
    script.setAttribute("type", "text/javascript");
    script.setAttribute("src", src);
    return document.getElementsByTagName("head")[0].appendChild(script);
  };
  return api = {
    options: {},
    configure: function(opt) {
      if (typeof opt === 'object') { api.options = opt; }
      return api;
    },
    load: function(opt) {
      api.configure(opt);
      if (root.userlike._config===undefined ) {
        root.userlike._config = {'app_key': '7b2506ca-7d85-388c-bc03-710de7899232', 'widget_key': '76ab1375d2f21defca9f0e198965bf5629cdf51024ca74da2bcd9fd87c427f68', 'data': '', 'options': api.options};
        root.userlike.loader('//dq4irj27fs462.cloudfront.net/javascripts/userlike-production-1002.min.js');
      }
      return root.userlike;
    }
  };
}));
